#!/usr/bin/env ruby

require "optparse"
require "faraday"
require "json"

class CodeScout
  def initialize(options = {})
    @path    = "/tmp/project"
    @push_id = options[:push]
    @host    = options[:host]
    @token   = options[:token]
    @repo    = options[:repository]
    @branch  = options[:branch]
    @commit  = options[:commit]
  end

  def execute
    fetch_access_key
    clone_repository
    
    Dir.chdir(@path) do
      checkout_commit
      generate_reports
      submit_reports
    end
  end

  def clone_repository
    unless run("git clone --quiet --depth=50 --branch #{@branch} #{@repo} #{@path}")
      raise "Unable to clone repository!"
    end
  end

  def checkout_commit
    run("git checkout -qf #{@commit}")
  end

  def generate_reports
    run("sandi_meter -d --json -p . > sandi_meter.json")
    run("brakeman --no-progress --format=json . > brakeman.json")
    run("flog --json --19 -q -g app lib > flog.json")
    run("rails_best_practices --format json .")
    run("dependenci --json . > dependenci.json")
  end

  def submit_reports
    submit_report("sandi_meter", "sandi_meter.json")
    submit_report("brakeman", "brakeman.json")
    submit_report("flog", "flog.json")
    submit_report("rails_best_practices", "rails_best_practices_output.json")
    submit_report("dependenci", "dependenci.json")
  end

  def fetch_access_key
    url = "http://#{@host}/api/v1/access_keys?token=#{@token}"
    response = Faraday.get(url)

    if response.success?
      key = JSON.load(response.body).first
      install_access_key(key)
    else
      raise "Unable to fetch access keys!"
    end
  end

  def install_access_key(key)
    File.open("/root/.ssh/id_rsa", "w")     { |f| f.write(key["private_key"]) }
    File.open("/root/.ssh/id_rsa.pub", "w") { |f| f.write(key["ssh_public_key"]) }
  end

  private

  def run(command)
    output = `#{command}`
    $?.exitstatus == 0
  end

  def submit_report(reporter, path)
    run("curl -X POST \"#{submit_url(reporter)}\" -d @#{path}")
  end

  def submit_url(reporter)
    "http://#{@host}/receive?token=#{@token}&push_id=#{@push_id}&reporter=#{reporter}"
  end
end

# ------------------------------------------------------------------------------

options = {}

optsparse = OptionParser.new do |opts|
  opts.on("--host HOST", "Hostname") do |val|
    options[:host] = val
  end
 
  opts.on("--token TOKEN", "Project token") do |val|
    options[:token] = val
  end

  opts.on("--push ID", "Project push ID") do |val|
    options[:push] = val
  end
 
  opts.on("--repository URL", "Git repository URL") do |val|
    options[:repository] = val
  end
 
  opts.on("--branch NAME", "Git branch") do |val|
    options[:branch] = val
  end
 
  opts.on("--commit SHA", "Git commit") do |val|
    options[:commit] = val
  end
 
  opts.parse!
end

if options.empty?
  STDOUT.puts(optsparse)
  exit 1
end

CodeScout.new(options).execute